class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        if (k == 0 || k > n) return res;
        helper(res, new ArrayList<>(), n, k, 1);
        return res;
    }
    
    public void helper(List<List<Integer>> res, List<Integer> list, int n, int k, int index) {
        if (k == 0) {
            res.add(new ArrayList<>(list));
            return;
        }
        for (int i = index; i <= n; i ++) {
            list.add(i);
            helper(res, list, n, k - 1, i + 1);
            list.remove(list.size() - 1);
        }
    }
}

class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0, max = Integer.MIN_VALUE;
        for (int num : nums) {
            sum += num;
            max = Math.max(max, num);
        }
        if (sum % 2 != 0 || sum/2 < max) return false;
       
        return helper(nums, nums.length-1, sum/2);
    }
    
    public boolean helper(int[] nums, int index, int target) {
        if (index < 0 || target < 0) return false;
        if (target == 0) return true;
        return helper(nums, index-1, target-nums[index]) || helper(nums, index-1, target);
    }
}
