class Solution {
//     public int majorityElement(int[] nums) {
//         return major(nums, 0, nums.length - 1);
//     }
    
//     private int major(int[] nums, int left, int right) {
//         if (left == right) return nums[left];
//         int mid = left + (right - left) / 2;
//         int lm = major(nums, left, mid);
//         int rm = major(nums, mid + 1, right);
//         if (lm == rm) return rm;
//         return getCount(nums, left, mid, lm) > getCount(nums, mid + 1, right, rm) ? lm : rm;
//     }
    
//     private int getCount(int[] nums, int left, int right, int val) {
//         int cnt = 0;
//         for (int i = left; i <= right; i++) {
//             if (nums[i] == val) cnt++;    
//         }    
//         return cnt;
//     }
    
//Moore voting algorithm
//每次都找出一对不同的元素并从数组中删掉，直到数组为空或只有一种元素
    public int majorityElement(int[] nums) {
        int count = 0;
        int res = 0;
        for (int num : nums) {
            if (count == 0)
                res = num;
            if (num != res)
                count --;
            else
                count ++;
        }
        return res;
    }
}
