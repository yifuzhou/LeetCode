dp for palin:
boolean[][] dp = new boolean[s.length()][s.length()];
        for(int i = 0; i < s.length(); i++) {
            for(int j = 0; j <= i; j++) {
                if(s.charAt(i) == s.charAt(j) && (i - j <= 2 || dp[j+1][i-1])) {
                    dp[j][i] = true;
                }
            }
        }

6ms

public List<List<String>> partition(String s) {
	List<List<String>> lists=new ArrayList<>();
	int len=s.length();
	if(len==0) return lists;
	backtrack(lists, new ArrayList<>(), s,0,len);
	return lists;
}
private void backtrack(List<List<String>> lists,List<String> list,String s, int l, int r) {
	if(l==r) {
		lists.add(new ArrayList<>(list));
		return;
	}
	for(int i=l+1;i<=r;i++) {
		if(isPalindrome(s, l, i)) {
			list.add(s.substring(l, i));
			backtrack(lists, list, s,i,r);
			list.remove(list.size()-1);
		}
	}
}
private boolean isPalindrome(String s, int l, int r){
    if(l==r-1) return true;
    while(l<r-1){
        if(s.charAt(l)!=s.charAt(r-1)) return false;
        l++;r--;
    }
    return true;
}

24ms(previous version)

public List<List<String>> partition(String s) {
    List<List<String>> lists=new ArrayList<>();
    if(s.length()==0) return lists;
    backtrack(lists, new ArrayList<>(), s);
    return lists;
}
private void backtrack(List<List<String>> lists,List<String> list,String s) {
    if(s.equals("")) {
        lists.add(new ArrayList<>(list));
        return;
    }
    for(int i=1;i<=s.length();i++) {
        String subString=s.substring(0, i);
        if(isPalin(subString)) {
            list.add(subString);
            backtrack(lists, list, s.substring(i, s.length()));
            list.remove(list.size()-1);
        }
    }
}
private boolean isPalin(String s) {
    StringBuilder sBuilder=new StringBuilder(s);
    sBuilder=sBuilder.reverse();
    return s.equals(sBuilder.toString());
}
