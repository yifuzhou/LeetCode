2D array dp[][]: 
只考虑当前的substring 的情况做最优化，例如dp[2][3], 只考虑string1中前两位和string2中前三位的比较得到最优解，往后的再一步步推理知道全部。
https://www.youtube.com/watch?v=b6AGUjqIPsA

class Solution {
       int minimumDeleteSum(String s1, String s2) {
        int m = s1.length(), n = s2.length();
        char[] a = s1.toCharArray(), b = s2.toCharArray();
        int[][] dp = new int[m + 1][n + 1];
        for (int j = 1; j <= n; j++) dp[0][j] = dp[0][j-1]+b[j-1];
        for (int i = 1; i <= m; i++) {
            dp[i][0] = dp[i-1][0]+a[i-1];
            for (int j = 1; j <= n; j++) 
                dp[i][j] = a[i-1] == b[j-1]? dp[i-1][j-1]:Math.min(dp[i-1][j]+a[i-1], dp[i][j-1]+b[j-1]);
        }
        return dp[m][n];
    }
}
