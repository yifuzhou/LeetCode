TIPs:

Vote Down
jiaming2
jiaming2
 785
Last Edit: Feb 17, 2018, 11:14 PM

Hi guys, this is my Java solution. I read this post, which is very helpful.

The basic idea is here:
Say we have 2 arrays, PRE and IN.
Preorder traversing implies that PRE[0] is the root node.
Then we can find this PRE[0] in IN, say itâ€™s IN[5].
Now we know that IN[5] is root, so we know that IN[0] - IN[4] is on the left side, IN[6] to the end is on the right side.
Recursively doing this on subarrays, we can build a tree out of it :)

Hope this helps.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
    Map<Integer, Integer> inMap = new HashMap<Integer, Integer>();
        for (int i = 0; i < inorder.length; i ++) {
            inMap.put(inorder[i], i);
        }
    TreeNode tree = buildTree(0, 0, inorder.length, preorder, inorder, inMap);
        return tree;
    }
    
    public TreeNode buildTree(int preStart, int inStart, int inEnd, int[] preorder, int[] inorder, Map<Integer, Integer> inMap) {
        if (preStart > preorder.length - 1 || inStart > inEnd) 
        return null;
        TreeNode root = new TreeNode(preorder[preStart]);
        int rootIndex = inMap.get(preorder[preStart]);
        int numLeft = rootIndex - inStart - 1;
        
        root.left = buildTree(preStart + 1, inStart, rootIndex - 1, preorder, inorder, inMap);

        root.right = buildTree(preStart + rootIndex - inStart + 1, rootIndex + 1, inEnd, preorder, inorder, inMap);
        return root;
    }
}
