class Solution {   
    private boolean[][] visited;
    public int numIslands(char[][] grid) {
        int counter = 0;
        for (int i = 0; i < grid.length; i ++) {
            for (int j = 0; j < grid[i].length; j ++) {
                if (grid[i][j] == '1') {
                    neighbor(grid, i, j);
                    counter ++;                  
                }
            }
        }
     return counter;   
    }  
    public void neighbor(char[][] grid, int row, int col) {
        if (row < 0||col < 0 || row >grid.length - 1 || col > grid[0].length - 1) return;
        if (grid[row][col] == '1') {
                    grid[row][col] = 'X';
                    neighbor(grid, row + 1, col);
                    neighbor(grid, row - 1, col);
                    neighbor(grid, row, col + 1);
                    neighbor(grid, row, col - 1);

    }
}
}
    
    Can also use the algoritm Union Find!
    
    https://www.youtube.com/watch?v=0jNmHPfA_yE
    
    class UF {

public int count = 0;
public int[] id = null;

public UF(int m, int n, char[][] grid) {
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            if(grid[i][j] == '1') count++;
        }
    }
    id = new int[m * n];
    for(int i = 0; i < m * n; i++) {
        id[i] = i;
    }
}

public int find(int p) {
    while(p != id[p]) {
        id[p] = id[id[p]];
        p = id[p];
    }
    return p;
}

public boolean isConnected(int p, int q) {
    int pRoot = find(p);
    int qRoot = find(q);
    if(pRoot != qRoot) return false;
    else return true;
}

public void union(int p, int q) {
    int pRoot = find(p);
    int qRoot = find(q);
    if(pRoot == qRoot) return;
    id[pRoot] = qRoot;
    count--;
}
}
